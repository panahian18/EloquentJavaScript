    // Finding Elements

// Using these links between nodes ot navigate is often useful, but if we want
// to find a specific node by starting at document.body and following a fixed
// path is often a bad idea since it bakes assumptions about the precise structure
// of our structure into our program, when this structure can change in the future.

// Additionally, text nodes are created when there are whitespaces between nodes
// the above example actually has 7 child nodes instead of 3. So, if we want to
// get the first link in the document, instead of giving a path, we just ask for
// the first link in document.

let link = document.getElementsByTagName("a")[0];
console.log(link.href);

// All element nodes have a getElementsByTagName method, which collects all
// elements with the given tag name that are descendants of that node and returns
// them as an array like object. To find a specific node, you can give it an id
// attribute and use document.getElementById instead.

<p>My ostrich Gertrude:</p>
<p><img id="gertrude" src="img/ostrich.png"></p>

<script>
  let ostrich = document.getElementById("gertrude");
  console.log(ostrich.src)
</script>

// Similarily, you can use getElementByClassName, which is similar to the above
// but retrieves all elements that have the given string in their class attribute.

    // Chaning the document

// The DOM data can be modified extensively. We can use "remove" to remove a
// node and we can add a child node to an element node using "appendChild" to
// add a node at the end of a list of children or "insertBefore" to add it at
// the beginning.

<p>One</p>
<p>Two</p>
<p>Three</p>

<script>
  let paragraphs = document.getElementsByTagName("p");
  document.body.insertBefore(paragraphs[2], paragraphs[0]);
</script>

// All operations that involve inserting a node will as a side effect, remove it
// from its current position first. The replaceChild method is used to replace
// a child node with another one. It accepts the new

    // Creating nodes

// In this example, we want to replace all images in the document with the text
// held in their alt attributes. Text nodes are created with document.createText

<p>The <img src="img/cat.png" alt="Cat"> in the
  <img src="img/hat.png" alt="Hat">.</p>

  <p><button onClick="replaceImages()">Replace</p>

  <script>
    function replaceImages() {
      let images = document.getElementsByTagName("img"); // First retrieve all images and put it into a list
      for (let i = images.length - 1; i >= 0; i--) {//iterate throug all values of the list.
        let image = images[i];
        if (image) {
          let text = document.createTextNode(image.alt);
          image.parentNode.replaceChild(text, image);
        }
      }
    }
  </script>

// We have to count down backwards in the for loop since the list generated by
// getElementsByTagName is a live list that updates as the document changes.
// If we iterate forwards then as we remove a node, the length decreases by one
// this would cause the loop to end early.

// Instead of created a live list, we can create a solid collection of nodes,
// using Array.from

let arrayish = {0: "one", 1: "two", length: 2};
let array = Array.from(arrayish);
console.log(array.map(s => s.toUpperCase()));

// To create element nodes, you can use the document.createElement method, this
// method takes a tag name and returns a new empty node of a given type.
